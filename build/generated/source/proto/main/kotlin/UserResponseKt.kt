//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: user.proto

@kotlin.jvm.JvmName("-initializeuserResponse")
inline fun userResponse(block: UserResponseKt.Dsl.() -> kotlin.Unit): User.UserResponse =
  UserResponseKt.Dsl._create(User.UserResponse.newBuilder()).apply { block() }._build()
object UserResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: User.UserResponse.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: User.UserResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): User.UserResponse = _builder.build()

    /**
     * <code>string user_id = 1;</code>
     */
    var userId: kotlin.String
      @JvmName("getUserId")
      get() = _builder.getUserId()
      @JvmName("setUserId")
      set(value) {
        _builder.setUserId(value)
      }
    /**
     * <code>string user_id = 1;</code>
     */
    fun clearUserId() {
      _builder.clearUserId()
    }

    /**
     * <code>string name = 2;</code>
     */
    var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <code>string name = 2;</code>
     */
    fun clearName() {
      _builder.clearName()
    }

    /**
     * <code>string email = 3;</code>
     */
    var email: kotlin.String
      @JvmName("getEmail")
      get() = _builder.getEmail()
      @JvmName("setEmail")
      set(value) {
        _builder.setEmail(value)
      }
    /**
     * <code>string email = 3;</code>
     */
    fun clearEmail() {
      _builder.clearEmail()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun User.UserResponse.copy(block: UserResponseKt.Dsl.() -> kotlin.Unit): User.UserResponse =
  UserResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

